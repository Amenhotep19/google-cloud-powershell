<div ng-if="!contentCtrl.productInfo">
  <h2>Error</h2>
  <p class="text">No information for product {{ contentCtrl.currentProduct }}.</p>
</div>

<!-- Product-specific copy. Usually cribbed from the marketing page. -->
<div
    class="psr-textBlock"
    ng-if="contentCtrl.productInfo"
    ng-switch="contentCtrl.currentProduct">
  
  <!-- Compute Engine -->
  <div ng-switch-when="google-compute-engine">
    <p>
      Google Compute Engine lets you create and run virtual machines on Google
      infrastructure. Compute Engine offers scale, performance, and value that
      allows you to easily launch large compute clusters on Google's
      infrastructure. There are no upfront investments and you can run
      thousands of virtual CPUs on a system that has been designed to be fast,
      and to offer strong consistency of performance.
    </p>

    <h2>Instances</h2>
    <p>
      Google Compute Engine VMs are referred to as <em>instances</em>. To create
      an instance, you must first create an <em>instance configuration</em>.
      This requires at the minimum a name, a machine type, and a boot disk
      image or preexisting boot disk.
    </p>
    <p>
      Once you have your configuration object, you can send them to the
      <cmdlet-ref name="Add-GceInstance"></cmdlet-ref> cmdlet to build them of a
      particular project and zone. If your active gcloud configuration has a
      project and zone, then those parameters are optional.
    </p>
    <pre>
# Define the project name you want to create the instance in. If not set, the
# command will use the current default project specified by gcloud config.
$project = "&lt;your-project-name&gt;"

# Define the configuration for an instance called "webserver-1"
$config = New-GceInstanceConfig "webserver-1" -MachineType "n1-standard-4" `
          -DiskImage (Get-GceImage -Family "windows-2012-r2")

# Attempt to create the instance based on the configuration
$config | Add-GceInstance -Project $project -Zone "us-central1-b"</pre>
    <h2>Management</h2>
    <p>
      In addition to basic cmdlets to start, stop, or restart an instance,
      you can set tags, disks, access configs or metadata after creating
      your VM with the <cmdlet-ref name="Set-GceInstance"></cmdlet-ref> cmdlet.
    </p>
    <pre>
$instance = "&lt;your-instance-name&gt;"

# Fetch information about the instance
Get-GceInstance $instance

# Stop, start, restart the instance
Stop-GceInstance $instance
Start-GceInstance $instance
Restart-GceInstance $instance
  
# Add a new network access configuration to the instance
[Google.Apis.Compute.v1.Data.AccessConfig] $newConfig = @{}
$newConfig.Kind = "ONE_TO_ONE_NAT"
$newConfig.Name = "New NAT"

Set-GceInstance "instance-name" `
    -NetworkInterface "nic0" 
    -RemoveAccessConfig "External NAT"
    -NewAccessConfig $newConfig

# Edit the metadata and tags on the instance
Set-GceInstance "instance-name" -AddMetadata @{"newKey" = "newValue"}
Set-GceInstance "instance-name" -RemoveMetadata "newKey"
Set-GceInstance "instance-name" -RemoveTag "beta" -AddTag "alpha"</pre>  
  </div>


  <!-- Cloud Storage -->
  <div ng-switch-when="google-cloud-storage">
    <p>
      Google Cloud Storage allows world-wide storage and retrieval of any
      amount of data at any time. You can use Google Cloud Storage for a range
      of scenarios including serving website content, storing data for archival
      and disaster recovery, or distributing large data objects to users via
      direct download.
    </p>
    <h2>Buckets</h2>
    <p>
      Google Cloud Storage data is grouped into "buckets".
    </p>
    <pre>
# List all buckets associated with a project
$project = "&lt;your-project-name&gt;"
Get-GcsBucket -Project $project

# Create a new bucket in the project
New-GcsBucket -Project $project -Name "&lt;your-bucket-name&gt;"</pre>
    <h2>Objects</h2>
    <p>
      Each bucket contains "objects", which contain arbitrary data.
    </p>
    <pre>
$bucket = "&lt;your-bucket-name&gt;"

# List all objects in a GCS bucket.
Find-GcsObject -Bucket $bucket

# Upload a file to the bucket in a "test" folder,
# renames it in passing from "test-file.png" to "test.png"
# NOTE: This will fail unless you have permissions to write in the bucket.
Write-GcsObject -Bucket $bucket -File "test-file.png" -ObjectName "test/test.png"

# Download a GCS object to disk.
Read-GcsObject $bucket "object-name" -OutFile "output-file.png"</pre>
    <h2>Cloud Storage PowerShell Provider</h2>
    <p>
      Cloud Tools for PowerShell includes a PowerShell provider for Google Cloud Storage.
      This provider allows you to use commands like cd, dir, copy and del to navigate
      and manipulate your data in Cloud Storage as if the data were on a local file system.

      To directly use the provider, you can start Cloud Tools for PowerShell using the shortcut
      from the start menu. This will launch a PowerShell console with the provider loaded:
    </p>
    <pre>
# Navigate to Google Cloud Storage
cd gs:\
# Show the available buckets
ls
# Create a new bucket
mkdir my-new-bucket</pre>
    <p>
      You can also make the provider available in any PowerShell session by importing
      the Cloud Tools for PowerShell module via "Import-Module GoogleCloud".
    </p>
  </div>


  <!-- Google Cloud DNS -->
  <div ng-switch-when="google-cloud-dns">
    <p>
      Google Cloud DNS is a high-performance, resilient, global Domain Name 
      System (DNS) service that publishes your domain names to the global DNS 
      in a cost-effective way. You can use Google Cloud DNS to publish your 
      zones and records in the DNS without the burden of managing your own DNS 
      servers and software.
    </p>
    <h2>Managed Zones</h2>
    <p>
      In Cloud DNS, a managed zone models a DNS zone and holds DNS records for  
      the same DNS name suffix (e.g., <code class="code">dnsexample.com.</code>). You can add a zone 
      to your Google Cloud Console project using the <cmdlet-ref name="Add-GcdManagedZone"></cmdlet-ref>
      cmdlet. Each zone in your project must have a unique name and a unique 
      DNS name to specify its associated DNS name suffix.  
    </p>
    <pre>
$project = "&lt;your-project-name&gt;"

# Create a managed zone for the DNS suffix dnsexample.com.
$zone = "&lt;your-zone-name&gt;"
$dnsSuffix = "&lt;dnsexample.com.&gt;"
Add-GcdManagedZone -Project $project -Name $zone -DnsName $dnsSuffix

# List all the managed zones in your project.
Get-GcdManagedZone -Project $project</pre>
    <h2>Resource Record Sets</h2>
    <p>
      <a href="https://cloud.google.com/dns/records/json-record">ResourceRecordSets</a> in Cloud  
      DNS are DNS records that you can create using the <cmdlet-ref name="New-GcdResourceRecordSet"></cmdlet-ref>
      cmdlet and retrieve from a managed zone using the <cmdlet-ref name="Get-GcdResourceRecordSet"></cmdlet-ref>
      cmdlet.
    </p>
    <p>
      However, to actually add or remove records from a managed zone, you must send
      a change request to the zone using the <code>Add-GcdChange</code> cmdlet. 
    </p>
    <pre>
# Create a new A-type resource record for "dnsexample.com." and point it to
# an IPv4 address.
$ipv4 = "107.1.23.134"
$ARecord = New-GcdResourceRecordSet -Name $dnsSuffix -Rrdata $ipv4 -Type "A"

# Add the record to your zone. 
Add-GcdChange -Project $project -Zone $zone -Add $ARecord

# Retrieve the newly added A-type record.  
$ARecord = Get-GcdResourceRecordSet -Project $project -Zone $zone -Filter "A"

# Remove the retrieved record from your zone.
Add-GcdChange -Project $project -Zone $zone -Remove $ARecord</pre>
  </div>


  <!-- Google Cloud SQL -->
  <div ng-switch-when="google-cloud-sql">
    <p>
      Google Cloud SQL lets you set-up, maintain, manage, and administer
      your relational MySQL databases on Google's Cloud Platform.
    </p>
    <h2>Instances</h2>
    <p>
      Google Cloud SQL instances hold all of your MySQL databases
      and their relevant data. To create an instance, you must first
      create an <em>Cloud SQL instance configuration</em>. This requires, at the
      minimum, a name for your instance, and a <em>setting configuration</em>,
      which doesn't require anything.
    </p>
    <p>
      After the configuration object has been made, the <cmdlet-ref name="Add-GcSqlInstance"></cmdlet-ref>
      cmdlet can be called to create that instance in a particular project.
      If your active gcloud configuration has a project, the parameter is optional.
    </p>
    <pre>
$setting = New-GcSqlSettingConfig 
$instance = New-GcSqlInstanceConfig `
    "my-instance-name" -SettingConfig $setting

$instance | Add-GcSqlInstance -Project $myProjectName</pre>
    <h2>Importing Data</h2>
    <p>
      MySQL dump filles and CSV files on either your local machine
      or on a Google Cloud Storage Bucket can be imported to your instance's
      databases with the <cmdlet-ref name="Import-GcSqlInstance"></cmdlet-ref>.
    </p>
    <pre>
Import-GcSqlInstance "my-instance-name" "C:\Users\User\file.csv" `
    "destination-database" "destination-table"</pre>  
  </div>


  <!-- Default. Should not get here if cmdlet data is well-formed. -->
  <div ng-switch-default>
  </div>

  <h2>All Resources</h2>
  <table class="psr-linkTable">
    <tr>
      <th>Resource</th>
    </tr>
    <tr ng-repeat="resource in contentCtrl.productInfo.resources | orderBy:'name'">
      <td>
        <a href="/google-cloud-powershell/#/{{ contentCtrl.productInfo.name }}/{{ resource.name }}">
          <div>
            {{ resource.name }}
          </div>
        </a>
      </td>
    </tr>
  </table>
</div>
