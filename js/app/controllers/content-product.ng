<div ng-if="!contentCtrl.productInfo">
  <h2>Error</h2>
  <p class="text">No information for product {{ contentCtrl.currentProduct }}.</p>
</div>

<!-- Product-specific copy. Usually cribbed from the marketing page. -->
<div
    class="psr-textBlock"
    ng-if="contentCtrl.productInfo"
    ng-switch="contentCtrl.currentProduct">
  
  <!-- Compute Engine -->
  <div ng-switch-when="google-compute-engine">
    <p>
      Google Compute Engine lets you create and run virtual machines on Google
      infrastructure. Compute Engine offers scale, performance, and value that
      allows you to easily launch large compute clusters on Google's
      infrastructure. There are no upfront investments and you can run
      thousands of virtual CPUs on a system that has been designed to be fast,
      and to offer strong consistency of performance.
    </p>

    <h2>Instances</h2>
    <p>
      Google Compute Engine VMs are referred to as <em>instances</em>. To create
      an instance, you must first create an <em>instance configuration</em>.
      This requires at the minimum a name, a machine type, and a boot disk
      image or preexisting boot disk.
    </p>
    <p>
      Once you have your configuration object, you can send them to the
      <cmdlet-ref name="Add-GceInstance"></cmdlet-ref> cmdlet to build them of a
      particular project and zone. If your active gcloud configuration has a
      project and zone, then those parameters are optional.
    </p>
    <pre>
# Define the project name you want to create the instance in. If not set, the
# command will use the current default project specified by gcloud config.
$project = "&lt;your-project-name&gt;"

# Define the configuration for an instance called "webserver-1"
$config = New-GceInstanceConfig "webserver-1" -MachineType "n1-standard-4" `
          -DiskImage (Get-GceImage -Family "windows-2012-r2")

# Attempt to create the instance based on the configuration
$config | Add-GceInstance -Project $project -Zone "us-central1-b"</pre>
    <h2>Management</h2>
    <p>
      In addition to basic cmdlets to start, stop, or restart an instance,
      You can set tags, disks, access configs or metadata after creating
      your VM with the <cmdlet-ref name="Set-GceInstance"></cmdlet-ref> cmdlet.
    </p>
    <pre>
$instance = "&lt;your-instance-name&gt;"

# Fetch information about the instance
Get-GceInstance $instance

# Stop, start, restart the instance
Stop-GceInstance $instance
Start-GceInstance $instance
Restart-GceInstance $instance
  
# Add a new network access configuration to the instance
[Google.Apis.Compute.v1.Data.AccessConfig] $newConfig = @{}
$newConfig.Kind = "ONE_TO_ONE_NAT"
$newConfig.Name = "New NAT"

Set-GceInstance "instance-name" `
    -NetworkInterface "nic0" 
    -RemoveAccessConfig "External NAT"
    -NewAccessConfig $newConfig

# Edit the metadata and tags on the instance
Set-GceInstance "instance-name" -AddMetadata @{"newKey" = "newValue"}
Set-GceInstance "instance-name" -RemoveMetadata "newKey"
Set-GceInstance "instance-name" -RemoveTag "beta" -AddTag "alpha"</pre>  
  </div>


  <!-- Cloud Storage -->
  <div ng-switch-when="google-cloud-storage">
    <p>
      Google Cloud Storage allows world-wide storage and retrieval of any
      amount of data at any time. You can use Google Cloud Storage for a range
      of scenarios including serving website content, storing data for archival
      and disaster recovery, or distributing large data objects to users via
      direct download.
    </p>
    <h2>Buckets</h2>
    <p>
      Google Cloud Storage data is grouped into "buckets".
    </p>
    <pre>
# List all buckets associated with a project
$project = "&lt;your-project-name&gt;"
Get-GcsBucket -Project $project

# Create a new bucket in the project
New-GcsBucket -Project $project -Name "&lt;your-bucket-name&gt;"</pre>
    <h2>Objects</h2>
    <p>
      Each bucket contains "objects", which contain arbitrary data.
    </p>
    <pre>
$bucket = "&lt;your-bucket-name&gt;"

# List all objects in a GCS bucket.
Find-GcsObject -Bucket $bucket

# Upload a file to the bucket in a "test" folder,
# renames it in passing from "test-file.png" to "test.png"
# NOTE: This will fail unless you have permissions to write in the bucket.
Write-GcsObject -Bucket $bucket -File "test-file.png" -ObjectName "test/test.png"

# Download a GCS object to disk.
Read-GcsObject $bucket "object-name" -OutFile "output-file.png"</pre>
  </div>


  <!-- Google Cloud DNS -->
  <div ng-switch-when="google-cloud-dns">
    <p>
      Google Cloud DNS is a high-performance, resilient, global Domain Name 
      System (DNS) service that publishes your domain names to the global DNS 
      in a cost-effective way. You can use Google Cloud DNS to publish your 
      zones and records in the DNS without the burden of managing your own DNS 
      servers and software.
    </p>
    <h2>Managed Zones</h2>
    <p>
      In Cloud DNS, a managed zone models a DNS zone and holds DNS records for  
      the same DNS name suffix (e.g., <code class="code">dnsexample.com.</code>). You can add a zone 
      to your Google Cloud Console project using the <cmdlet-ref name="Add-GcdManagedZone"></cmdlet-ref>
      cmdlet. Each zone in your project must have a unique name and a unique 
      DNS name to specify its associated DNS name suffix.  
    </p>
    <pre>
$project = "&lt;your-project-name&gt;"

# Create a managed zone for the DNS suffix dnsexample.com.
$zone = "&lt;your-zone-name&gt;"
$dnsSuffix = "&lt;dnsexample.com.&gt;"
Add-GcdManagedZone -Project $project -Name $zone -DnsName $dnsSuffix

# List all the managed zones in your project.
Get-GcdManagedZone -Project $project</pre>
    <h2>Resource Record Sets</h2>
    <p>
      <a href="https://cloud.google.com/dns/records/json-record">ResourceRecordSets</a> in Cloud  
      DNS are DNS records that you can create using the <cmdlet-ref name="New-GcdResourceRecordSet"></cmdlet-ref>
      cmdlet and retrieve from a managed zone using the <cmdlet-ref name="Get-GcdResourceRecordSet"></cmdlet-ref>
      cmdlet.
    </p>
    <p>
      However, to actually add or remove records from a managed zone, you must send
      a change request to the zone using the <code>Add-GcdChange</code> cmdlet. 
    </p>
    <pre>
# Create a new A-type resource record for "dnsexample.com." and point it to
# an IPv4 address.
$ipv4 = "107.1.23.134"
$ARecord = New-GcdResourceRecordSet -Name $dnsSuffix -Rrdata $ipv4 -Type "A"

# Add the record to your zone. 
Add-GcdChange -Project $project -Zone $zone -Add $ARecord

# Retrieve the newly added A-type record.  
$ARecord = Get-GcdResourceRecordSet -Project $project -Zone $zone -Filter "A"

# Remove the retrieved record from your zone.
Add-GcdChange -Project $project -Zone $zone -Remove $ARecord</pre>
  </div>


  <!-- Google Cloud SQL -->
  <div ng-switch-when="google-cloud-sql">
    <p>
      Google Cloud SQL lets you set-up, maintain, manage, and administer
      your relational MySQL databases on Google's Cloud Platform.
    </p>
    <h2>Instances</h2>
    <p>
      Google Cloud SQL instances hold all of your MySQL databases
      and their relevant data. To create an instance, you must first
      create an <em>Cloud SQL instance configuration</em>. This requires, at the
      minimum, a name for your instance, and a <em>setting configuration</em>,
      which doesn't require anything.
    </p>
    <p>
      After the configuration object has been made, the <cmdlet-ref name="Add-GcSqlInstance"></cmdlet-ref>
      cmdlet can be called to create that instance in a particular project.
      If your active gcloud configuration has a project, the parameter is optional.
    </p>
    <pre>
$setting = New-GcSqlSettingConfig 
$instance = New-GcSqlInstanceConfig `
    "my-instance-name" -SettingConfig $setting

$instance | Add-GcSqlInstance -Project $myProjectName</pre>
    <h2>Importing Data</h2>
    <p>
      MySQL dump filles and CSV files on either your local machine
      or on a Google Cloud Storage Bucket can be imported to your instance's
      databases with the <cmdlet-ref name="Import-GcSqlInstance"></cmdlet-ref>.
    </p>
    <pre>
Import-GcSqlInstance "my-instance-name" "C:\Users\User\file.csv" `
    "destination-database" "destination-table"</pre>  
  </div>

  <!-- Google Cloud PubSub -->
  <div ng-switch-when="google-cloud-pubsub">
    <p>
      Google Cloud Pub/Sub is a fully-managed real-time messaging service that
      allows you to send and receive messages between independent applications.
    </p>
    <h2>Publisher</h2>
    <p>
      Publisher application creates and sends messages to a <em>topic</em>.
      The <cmdlet-ref name="New-GcpsTopic"></cmdlet-ref> can be called to create an instance
      in a particular topic. If your active gcloud configuration has a project, you don't have to
      use <code>-Project</code> parameter.
    </p>
    <pre>
# Creates topic "my-topic" in the default project.
New-GcpsTopic -Topic "my-topic"</pre>
    <p>
      After the topic has been created, you can now publish messages to the topic using the
      <cmdlet-ref name="Publish-GcpsMessage"></cmdlet-ref> cmdlet.
    </p>
    <pre>
# Publish message with data "This is a test" to topic "my-topic".
Publish-GcpsMessage -Data "This is a test" -Topic "my-topic"</pre>
    <p>
      To publish multiple messages to the same topic with a single request, you can use the
      <cmdlet-ref name="New-GcpsMessage"></cmdlet-ref> cmdlet to create an array of messages
      and pass that to the <cmdlet-ref name="Publish-GcpsMessage"></cmdlet-ref> cmdlet.
    </p>
    <pre>
# Creates two messages.
$messageOne = New-GcpsMessage -Data "This is a test"
$messageTwo = New-GcpsMessage -Data "Data" -Attributes @{"key" = "value"}
      
# Publish the messages to topic "my-topic".
Publish-GcpsMessage -Message @($messageOne, $messageTwo) -Topic "my-topic"</pre>
    <h2>Subscriber</h2>
    <p>
      Subscriber application creates a <em>subscription</em> to a topic to receive messages from it.
      The <cmdlet-ref name="New-GcpsSubscription"></cmdlet-ref> cmdlet can be called to create an instance
      in a particular topic. If your active gcloud configuration has a project, you don't have to
      use <code>-Project</code> parameter.
    </p>
    <p>
      By default, the subscription created is a pull subscription, which means the subscriber will
      pull the messages from the topic. You can create a push subscription (Pub/Sub will push messages
      to the subscriber's chosen endpoint) with <code>-PushEndpoint.</code>
    </p>
    <pre>
# Creates pull subscription "pull-subscription" to topic "my-topic" in the default project.
New-GcpsSubscription -Topic "my-topic" -Subscription "pull-subscription"

# Creates push subscription "push-subscription" to topic "my-topic".
New-GcpsSubscription -Topic "my-topic" `
                     -Subscription "push-subscription" `
                     -PushEndpoint "http://www.example.com"
</pre>
    <p>
      To pull messages from a subscription, the <cmdlet-ref name="Get-GcpsMessage"></cmdlet-ref> cmdlet can
      be used. By default, the cmdlet will block until at least one message is retrieved. To prevent blocking,
      the switch <code>-ReturnImmediately</code> can be used. The cmdlet can also automatically send
      an acknowledgement for every retrieved message if the switch <code>-AutoAck</code> is used. If not,
      you will have to use the <cmdlet-ref name="Send-GcpsAck"></cmdlet-ref> cmdlet to send the acknowledgement.
      Unacknowledged messages will become available again for pulling after the acknowledgement deadline of the message expires.
    </p>
    <pre>
# Pulls messages from subscription "my-subscription" and sends out acknowledgement automatically.
Get-GcpsMessage -Subscription "--subscription" -AutoAck

# Pulls messages from subscription "my-subscription" and sends out acknowledgement with Send-GcpsAck.
$messages = Get-GcpsMessage -Subscription "--subscription"
Send-GcpsAck -InputObject $messages</pre>
  </div>

  <!-- Google Cloud Logging -->
  <div ng-switch-when="google-cloud-logging">
    <p>
      Stackdriver Logging allows you to store, search, analyze, monitor and alert on log data
      and events from Google Cloud Platform and Amazon Web Services.
    </p>
    <h2>Log and log entries</h2>
    <p>
      A log is a named collection of log entries within the project. A log entry records status or an event.
      The entry might be created by GCP services, AWS services, third party applications, or your own applications.
      The "message" the log entry carries is called the payload, and it can be a simple string or structured data.
      Each log entry indicates where it came from by including the name of a monitored resource.
    </p>
    <p>
      The cmdlet <cmdlet-ref name="New-GcLogEntry"></cmdlet-ref> can be used to create a log entry.
      You will have to specify the log that the entry belongs to (if the log does not exist, it will
      be created). To associate the log with a monitored resource, you can use the -MonitoredResource parameter.
      By default, the log entry is associated with the "global" resource. To create a monitored resource,
      use the <cmdlet-ref name="New-GcLogMonitoredResource"></cmdlet-ref> cmdlet.
  </p>
    <pre>
# Creates a log entry in the log "my-log".
New-GcLogEntry -LogName "my-log" -TextPayload "This is a log."

# Creates a log entry associated with Cloud SQL monitored resource.
$resource = New-GcLogMonitoredResource -ResourceType "cloudsql_database" `
                                       -Labels @{"project_id" = "my-project";
                                                 "database_id" = "id"}
New-GcLogEntry -LogName "my-log" `
               -TextPayload "Log" `
               -MonitoredResource $resource</pre>
    <p>
      You can retrieve log entries with the cmdlet <cmdlet-ref name="Get-GcLogEntry"></cmdlet-ref>.
    </p>
    <pre>
# Gets all entries from log "my-log"
Get-GcLogEntry -LogName "my-log"

# Gets all entries associated with Google Cloud Engine instances.
Get-GcLogEntry -ResourceName "gce_instance"</pre>
    <h2>Log Sinks</h2>
    <p>
      To export log entries, you can create log sinks with the cmdlet <cmdlet-ref name="New-GcLogSink"></cmdlet-ref>.
      Stackdriver Logging will match incoming log entries against your sinks and all log entries matching each sink
      are then copied to the associated destination. Log entries that exist before the sink is created will not be exported.
    </p>
    <p>
      Destinations for exported logs can be Google Cloud Storage Buckets, Google BigQuery Datasets
      or Google Cloud Pub/Sub Topics.
    </p>
    <pre>
# Creates a log sink for log entries in the default project.
New-GcLogSink -Sink "my-sink" -GcsBucketDestination "my-bucket"

# Creates a log sink for log entries in log "my-log".
New-GcLogSink -Sink "my-sink" `
              -LogName "my-log" `
              -BigQueryDataSetDestination "my_dataset"

# Creates a log sink for log entries that match the filter.
New-GcLogSink -Sink "my-sink" `
              -Filter "textPayload = `"Testing`"" `
              -PubSubTopicDestination "my_dataset"</pre>
    <h2>Log Metrics</h2>
    <p>
      You can create log metrics that count the number of log entries that match a certain criteria
      with the cmdlet <cmdlet-ref name="New-GcLogMetric"></cmdlet-ref>. These metrics can be used
      to create charts and alerting policies in Stackdriver Monitoring.
  </p>
    <pre>
# Creates a metric for entries in log "my-log".
New-GcLogMetric -Metric "my-metric" -LogName "my-log"

# Creates a metric for entries associated with Google Cloud Engine instances.
New-GcLogMetric -Metric "my-metric" -ResourceType "gce_instance"

# Creates a metric for entries that match the filter.
New-GcLogMetric -Metric "my-metric" -Filter "textPayload = `"Testing`""</pre>
  </div>

  <!-- Default. Should not get here if cmdlet data is well-formed. -->
  <div ng-switch-default>
  </div>

  <h2>All Resources</h2>
  <table class="psr-linkTable">
    <tr>
      <th>Resource</th>
    </tr>
    <tr ng-repeat="resource in contentCtrl.productInfo.resources | orderBy:'name'">
      <td>
        <a href="/google-cloud-powershell/#/{{ contentCtrl.productInfo.name }}/{{ resource.name }}">
          <div>
            {{ resource.name }}
          </div>
        </a>
      </td>
    </tr>
  </table>
</div>
